/* 
    JS的宏任务和微任务

    JS是单线程的，它的运行是基于事件循环机制（event Loop）
    调用栈
    	- 栈是一种数据结构，后进先出
    	- 调用栈中，放的是要执行的代码
    任务队列
    	- 队列是一种数据结构，先进后出
    	- 任务队列的是将要执行的代码
    	- 当调用栈中的代码执行完毕后，队列中的代码才会按照顺序
    依次进入栈中执行
    	- 在JS中任务队列有两种
    		- 宏任务队列（大部分代码都去宏任务队列中排队）
    		- 微任务队列（Promise回调函数，queueMicrotask()函数）
        - 整个流程
		1、执行调用栈中的代码
            2、执行微任务队列中的所有任务
		3、微任务队列执行完，最后才执行宏任务队列任务
*/
console.log("JS执行顺序===========");

/**
 * 以下3个执行顺序为：
 *   33333   22222  11111
 *
 * 
 */
setTimeout(()=>{
    //宏任务
    console.log(11111);
});

queueMicrotask(()=>{
    //微任务
    console.log(4444);
});

//微任务
Promise.resolve().then(()=> console.log(22222));

//栈代码块
console.log(33333);

//33333 4444 22222 11111